$NetBSD$

--- SConstruct.orig	2016-03-21 16:09:46.000000000 +0000
+++ SConstruct
@@ -59,7 +59,9 @@ nix = False
 linux = False
 darwin = False
 windows = False
+dragonfly = False
 freebsd = False
+netbsd = False
 openbsd = False
 solaris = False
 
@@ -71,8 +73,12 @@ elif platform.startswith("linux"):
     platform = "linux"
 elif "sunos5" == platform:
     solaris = True
+elif platform.startswith( "dragonfly" ):
+    dragonfly = True
 elif platform.startswith( "freebsd" ):
     freebsd = True
+elif platform.startswith( "netbsd" ):
+    netbsd = True
 elif platform.startswith( "openbsd" ):
     openbsd = True
 elif "win32" == platform:
@@ -676,6 +682,8 @@ if darwin:
 elif linux:
 
     env.Append( LIBS=['m'] )
+    env.Append( CPPPATH=[ "@PREFIX@/include" ] )
+    env.Append( LIBPATH=[ "@PREFIX@/lib" ] )
 
     if os.uname()[4] == "x86_64" and not force32:
         linux64 = True
@@ -696,6 +704,12 @@ elif solaris:
      env.Append( CPPDEFINES=[ "__sunos__" ] )
      env.Append( LIBS=["socket","resolv"] )
 
+elif os.sys.platform.startswith( "dragonfly" ):
+    env.Append( CPPPATH=[ "@PREFIX@/include" ] )
+    env.Append( LIBPATH=[ "@PREFIX@/lib" ] )
+    env.Append( LIBS=[ "m" ] )
+    env.Append( CPPDEFINES=[ "__dragonfly__" ] )
+
 elif freebsd:
     env.Append( LIBS=[ "kvm" ] )
     env.Append( EXTRACPPPATH=[ "/usr/local/include" ] )
@@ -703,6 +717,12 @@ elif freebsd:
     env.Append( CPPDEFINES=[ "__freebsd__" ] )
     env.Append( CCFLAGS=[ "-fno-omit-frame-pointer" ] )
 
+elif os.sys.platform.startswith( "netbsd" ):
+    env.Append( CPPPATH=[ "@PREFIX@/include" ] )
+    env.Append( LIBPATH=[ "@PREFIX@/lib" ] )
+    env.Append( LIBS=[ "m" ] )
+    env.Append( CPPDEFINES=[ "__netbsd__" ] )
+
 elif openbsd:
     env.Append( EXTRACPPPATH=[ "/usr/local/include" ] )
     env.Append( EXTRALIBPATH=[ "/usr/local/lib" ] )
@@ -846,8 +866,11 @@ if nix:
             env.Append( CCFLAGS=["-Werror"] )
 
     env.Append( CPPDEFINES=["_FILE_OFFSET_BITS=64"] )
+    env.Append( CPPDEFINES=["XP_UNIX=1"] )
     env.Append( CXXFLAGS=["-Wnon-virtual-dtor", "-Woverloaded-virtual"] )
+    env.Append( CXXFLAGS=os.environ['CXXFLAGS'] )
     env.Append( LINKFLAGS=["-fPIC", "-pthread"] )
+    env.Append( LINKFLAGS=os.environ['LDFLAGS'] )
 
     # SERVER-9761: Ensure early detection of missing symbols in dependent libraries at program
     # startup.
@@ -1372,9 +1395,9 @@ def doConfigure(myenv):
         conf.FindSysLibDep("yaml", ["yaml"])
 
     if use_system_version_of_library("boost"):
-        if not conf.CheckCXXHeader( "boost/filesystem/operations.hpp" ):
-            print( "can't find boost headers" )
-            Exit(1)
+        #if not conf.CheckCXXHeader( "boost/filesystem/operations.hpp" ):
+        #    print( "can't find boost headers" )
+        #    Exit(1)
 
         conf.env.Append(CPPDEFINES=[("BOOST_THREAD_VERSION", "2")])
 
@@ -1419,7 +1442,7 @@ def doConfigure(myenv):
         Exit(1)
 
     # requires ports devel/libexecinfo to be installed
-    if freebsd or openbsd:
+    if freebsd or openbsd or netbsd or dragonfly:
         if not conf.CheckLib("execinfo"):
             Exit(1)
 
